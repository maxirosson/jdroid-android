File propsFile = new File("$project.rootDir/gradle-local.properties")
if (propsFile.exists()) {
	def props = new Properties()
	props.load(new FileInputStream(propsFile))
	props.each { key, val ->
		project.allprojects {
			project.ext.set(key, val)
		}
	}
}

version = '2.1.0'

ext.JDROID_GITHUB_REPOSITORY_NAME = 'jdroid-android'

apply from: rootProject.file('libraryVersions.gradle')

apply plugin: 'com.jdroid.component.builder'
apply plugin: 'com.jdroid.root'

buildscript {

	repositories {
		jcenter()
		google()
		maven { url 'https://maven.fabric.io/public' }
		maven { url "https://plugins.gradle.org/m2/" }
		String localMavenRepoEnabled = project.hasProperty('LOCAL_MAVEN_REPO_ENABLED') ? project.ext.get('LOCAL_MAVEN_REPO_ENABLED') : System.getenv('LOCAL_MAVEN_REPO_EMABLED')
		boolean isLocalMavenRepoEnabled = localMavenRepoEnabled != null && localMavenRepoEnabled == "true"
		if (isLocalMavenRepoEnabled) {
			String localMavenRepo = project.hasProperty('LOCAL_MAVEN_REPO') ? project.ext.get('LOCAL_MAVEN_REPO') : System.getenv('LOCAL_MAVEN_REPO')
			if (localMavenRepo != null) {
				maven { url localMavenRepo }
			}
		}
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		mavenCentral()
	}

	dependencies {

		// https://github.com/maxirosson/jdroid-component-builder/blob/master/CHANGELOG.md
		classpath 'com.jdroidtools:jdroid-component-builder:1.1.0-SNAPSHOT'

		// https://github.com/maxirosson/jdroid-gradle-plugin/blob/master/CHANGELOG.md
		classpath 'com.jdroidtools:jdroid-gradle-root-plugin:2.0.0-SNAPSHOT'
	}
}

allprojects {

	ext.RESOURCE_PREFIX = "jdroid"
	ext.RESOURCE_FILES_TO_SKIP_PREFIX_VALIDATION = ["analytics.xml"]

	buildscript {
		repositories {
			jcenter()
			google()
			maven { url 'https://maven.fabric.io/public' }
			String localMavenRepoEnabled = project.hasProperty('LOCAL_MAVEN_REPO_ENABLED') ? project.ext.get('LOCAL_MAVEN_REPO_ENABLED') : System.getenv('LOCAL_MAVEN_REPO_EMABLED')
			boolean isLocalMavenRepoEnabled = localMavenRepoEnabled != null && localMavenRepoEnabled == "true"
			if (isLocalMavenRepoEnabled) {
				String localMavenRepo = project.hasProperty('LOCAL_MAVEN_REPO') ? project.ext.get('LOCAL_MAVEN_REPO') : System.getenv('LOCAL_MAVEN_REPO')
				if (localMavenRepo != null) {
					maven { url localMavenRepo }
				}
			}
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
			mavenCentral()
		}
	}

	repositories {
		jcenter()
		String localMavenRepoEnabled = project.hasProperty('LOCAL_MAVEN_REPO_ENABLED') ? project.ext.get('LOCAL_MAVEN_REPO_ENABLED') : System.getenv('LOCAL_MAVEN_REPO_EMABLED')
		boolean isLocalMavenRepoEnabled = localMavenRepoEnabled != null && localMavenRepoEnabled == "true"
		if (isLocalMavenRepoEnabled) {
			String localMavenRepo = project.hasProperty('LOCAL_MAVEN_REPO') ? project.ext.get('LOCAL_MAVEN_REPO') : System.getenv('LOCAL_MAVEN_REPO')
			if (localMavenRepo != null) {
				maven { url localMavenRepo }
			}
		}
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		mavenCentral()
	}
}
