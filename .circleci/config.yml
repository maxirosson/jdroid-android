version: 2.1

references:

  working_dir: &working_dir
                 ~/project

executors:
  android_executor:
    working_directory: *working_dir
    docker:
      - image: circleci/android:api-28
    environment:
      LOCAL_MAVEN_REPO: ~/repo
      GRADLE_OPTS: -Dorg.gradle.caching=true -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx4g -Xms1g"
      DEX_IN_PROCESS: true
      PRE_DEX_LIBRARIES: false
      JAVA_MAX_HEAP_SIZE: 4096m

  gcloud_executor:
    working_directory: *working_dir
    docker:
      - image: google/cloud-sdk:latest


commands:
  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-

  save_gradle_cache:
    steps:
      - save_cache:
          key: v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
          paths:
            - ~/.gradle

  attach_to_workspace:
    steps:
      - attach_workspace:
          at: ~/

  persist_gradle_build_cache:
    steps:
      - persist_to_workspace:
          root: ~/
          paths:
            - gradle-build-cache

  gcloud_auth:
    steps:
      - run:
          name: Authenticating on gcloud
          command: |
            echo "$GOOGLE_SERVICE_ACCOUNT" > /tmp/service-account.json
            gcloud auth activate-service-account --key-file=/tmp/service-account.json --project=jdroid-staging

jobs:
  build:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies --refresh-dependencies --stacktrace
      - run:
          name: Assembling Components
          command: |
            ./gradlew jdroid-android-core:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-about:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-facebook-login:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-admob:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-crashlytics:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-database:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-fcm:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-remoteconfig:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-glide:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-inappbilling:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-maps:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-play-games:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-signin:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-room:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
      - save_gradle_cache
      - persist_gradle_build_cache

  buildSample:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - attach_to_workspace
      - run:
          name: Assembling Samples
          command: |
            ./gradlew assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            #./gradlew assembleUat -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew assembleAutomation --stacktrace
            ./gradlew assembleRelease -PRELEASE_BUILD_TYPE_ENABLED=true -PFAKE_RELEASE_BUILD_TYPE_ENABLED=true --stacktrace

      - run:
          name: Saving apks
          command: |
            mkdir -p ~/apks/
            find . -type f -regex ".*/build/outputs/apk/jdroid-.*apk" -exec cp {} ~/apks/ \;
          when: always

      - store_artifacts:
          path: ~/apks
          destination: apks

  unitTest:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - attach_to_workspace
      - run: 
          name: Testing
          command: ./gradlew testDebugUnitTest -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
      - run:
          name: Save test XML results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/testDebugUnitTest/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - run:
          name: Save test results
          command: |
            modules_file="buildSrc/src/main/kotlin/Module.kt"
            destination="test-results"
            while read line
            do
              module=$(echo "$line" | sed -nE "s/.+\(\":(.+)\"\)[,;]/\1/p")
              module="${module//://}" #replace ':' by "/"
              if [[ ! -z "$module" ]]; then
                reports_dir="./${module}/build/reports/tests/testDebugUnitTest"
                if [[ -d "${reports_dir}" ]]; then
                if [[ ! -d "${destination}/${module}" ]]; then
                  mkdir -p "${destination}/${module}"
                fi
                  cp -R "${reports_dir}/." "${destination}/${module}/" || :
                fi
              fi
            done < "$modules_file"
          when: always

      - store_artifacts:
          path: ./test-results
          destination: test-results

  lint:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - attach_to_workspace
      - run:
          name: Linting
          command: ./gradlew lint --stacktrace
      - run:
          name: Save lint results
          command: |
            modules_file="buildSrc/src/main/kotlin/Module.kt"
            destination="lint-results"
            file_name="lint-results.html"
            while read line
            do
              module=$(echo "$line" | sed -nE "s/.+\(\":(.+)\"\)[,;]/\1/p")
              module="${module//://}" #replace ':' by "/"
              if [[ ! -z "$module" ]]; then
                lint_result="./${module}/build/reports/${file_name}"
                if [[ ! -d "${destination}/${module}" ]]; then
                  mkdir -p "${destination}/${module}"
                fi
                cp "$lint_result" "${destination}/${module}/${file_name}" || :
              fi
            done < "$modules_file"
          when: always

      - store_artifacts:
          path: ./lint-results
          destination: lint-results

  ktlint:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run: ./gradlew ktlint --stacktrace

  publish:
    executor: android_executor
    steps:
      - checkout
      - restore_gradle_cache
      - attach_to_workspace
      - run:
          name: Uploading to Nexus Sonatype
          command: ./gradlew publish -PLOCAL_UPLOAD=false -PRELEASE_BUILD_TYPE_ENABLED=true -PFAKE_RELEASE_BUILD_TYPE_ENABLED=true --stacktrace

  buildAutomationTest:
    executor: android_executor
    steps:
    - checkout
    - restore_gradle_cache
    - attach_to_workspace
    - run:
        name: Assembling automation & android test APKs
        command: |
          ./gradlew :jdroid-android-sample:assembleAutomation :jdroid-android-sample:assembleAndroidTest
          for file in "./jdroid-android-sample/build/outputs/apk/automation"/*.apk; do mv ${file} ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk; done

    - persist_to_workspace:
        root: ~/
        paths:
          - project/jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk
          - project/jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk

    - store_artifacts:
        path: ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk
        destination: jdroid-automation.apk
    - store_artifacts:
        path: ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
        destination: jdroid-android-sample-automation-androidTest.apk

  runRoboTest:
    executor: gcloud_executor
    steps:
    - checkout
    - attach_to_workspace
    - gcloud_auth
    - run:
        name: Running Robo tests
        command: gcloud firebase test android run firebase_test_lab.yml:robo-tests-virtual --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk
        no_output_timeout: 30m

  runInstrumentationTest:
    executor: gcloud_executor
    steps:
    - checkout
    - attach_to_workspace
    - gcloud_auth
    - run:
        name: Running Instrumentation tests
        command: |
          gcloud firebase test android run firebase_test_lab.yml:instrumentation-tests-physical --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk --test ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
          gcloud firebase test android run firebase_test_lab.yml:instrumentation-tests-virtual --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk --test ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
        no_output_timeout: 30m

  upgradeDependencies:
    executor: android_executor
    steps:
    - checkout
    - restore_gradle_cache
    - run:
        name: Upgrade Dependencies
        command: ./gradlew upgradeDependencies -PpullRequestEnabled=true --stacktrace

workflows:
  commit:
    jobs:
      - build
      - ktlint:
          requires:
            - build
      - lint:
          requires:
            - build
      - buildSample:
          requires:
            - build
      - unitTest:
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - master
          requires:
            - unitTest
            - lint
            - ktlint
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildAutomationTest
      - runRoboTest:
          requires:
            - buildAutomationTest
      - runInstrumentationTest:
          requires:
            - buildAutomationTest
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - upgradeDependencies
