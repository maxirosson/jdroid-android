version: 2

references:

  ## Workspace

  workspace: &workspace
    ~/workspace

  ## Cache

  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Docker image configurations

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28
    environment:
      LOCAL_MAVEN_REPO: ~/repo
      GRADLE_OPTS: -Dorg.gradle.caching=false -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx4g -Xms1g"
      DEX_IN_PROCESS: true
      PRE_DEX_LIBRARIES: false
      JAVA_MAX_HEAP_SIZE: 4096m

  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest


  # Commands

  gcloud_auth: &gcloud_auth
    run:
      name: Authenticating on gcloud
      command: |
        echo "$GOOGLE_SERVICE_ACCOUNT" > /tmp/service-account.json
        gcloud auth activate-service-account --key-file=/tmp/service-account.json --project=jdroid-staging

jobs:
  build:
    <<: *android_config
    steps:
      - checkout

      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies --refresh-dependencies --stacktrace
      - *save_cache

      - run:
          name: Assembling Components
          command: |
            ./gradlew jdroid-android-core:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-about:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-facebook-login:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-admob:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-crashlytics:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-database:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-fcm:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-firebase-remoteconfig:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-glide:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-inappbilling:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-maps:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-play-games:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-google-signin:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew jdroid-android-room:assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace

  buildSample:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache

      - run:
          name: Assembling Samples
          command: |
            ./gradlew assembleDebug -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            #./gradlew assembleUat -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace
            ./gradlew assembleAutomation --stacktrace
            ./gradlew assembleRelease -PRELEASE_BUILD_TYPE_ENABLED=true -PFAKE_RELEASE_BUILD_TYPE_ENABLED=true --stacktrace

      - run:
          name: Saving apks
          command: |
            mkdir -p ~/apks/
            find . -type f -regex ".*/build/outputs/apk/jdroid-.*apk" -exec cp {} ~/apks/ \;
          when: always

      - store_artifacts:
          path: ~/apks
          destination: apks

  unitTest:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache

      - run: 
          name: Testing
          command: ./gradlew testDebugUnitTest -PFIREBASE_PERFORMANCE_MONITORING_ENABLED=false --stacktrace

      - run:
          name: Save test XML results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/testDebugUnitTest/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - run:
          name: Save test results
          command: |
            destination="test-results"
            while read line
            do
              module=$(echo "$line" | sed -E "s/include \":(.+)\"/\1/g")
              module="${module//://}" #replace ':' by "/"
              reports_dir="./${module}/build/reports/tests/testDebugUnitTest"
              if [[ -d "${reports_dir}" ]]; then
                if [[ ! -d "${destination}/${module}" ]]; then
                  mkdir -p "${destination}/${module}"
                fi
                cp -R "${reports_dir}/." "${destination}/${module}/" || :
              fi
            done < "settings.gradle"
          when: always

      - store_artifacts:
          path: ./test-results
          destination: test-results

  lint:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache

      - run: 
          name: Linting
          command: ./gradlew lint --stacktrace

      - run:
          name: Save lint results
          command: |
            destination="lint-results"
            file_name="lint-results.html"
            while read line
            do
              module=$(echo "$line" | sed -E "s/include \":(.+)\"/\1/g")
              module="${module//://}" #replace ':' by "/"
              lint_result="./${module}/build/reports/${file_name}"
              if [[ ! -d "${destination}/${module}" ]]; then
                mkdir -p "${destination}/${module}"
              fi
              cp "$lint_result" "${destination}/${module}/${file_name}" || :
            done < "settings.gradle"
          when: always

      - store_artifacts:
          path: ./lint-results
          destination: lint-results

  ktlint:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache

      - run: ./gradlew ktlint --stacktrace

  publish:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache

      # TODO We shouldn't need the --refresh-dependencies if we persist the workspace
      - run:
          name: Uploading to Nexus Sonatype
          command: ./gradlew publish -PLOCAL_UPLOAD=false -PRELEASE_BUILD_TYPE_ENABLED=true -PFAKE_RELEASE_BUILD_TYPE_ENABLED=true --stacktrace --refresh-dependencies

  buildAutomationTest:
    <<: *android_config
    steps:
    - checkout
    - *restore_cache

    - run:
        name: Assembling automation & android test APKs
        command: |
          ./gradlew :jdroid-android-sample:assembleAutomation :jdroid-android-sample:assembleAndroidTest
          for file in "./jdroid-android-sample/build/outputs/apk/automation"/*.apk; do mv ${file} ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk; done

    - persist_to_workspace:
        root: jdroid-android-sample/build/outputs/apk
        paths:
          - automation/jdroid-automation.apk
          - androidTest/automation/jdroid-android-sample-automation-androidTest.apk

    - store_artifacts:
        path: ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk
        destination: jdroid-automation.apk
    - store_artifacts:
        path: ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
        destination: jdroid-android-sample-automation-androidTest.apk

  runRoboTest:
    <<: *gcloud_config
    steps:
    - checkout

    - attach_workspace:
        at: jdroid-android-sample/build/outputs/apk

    - *gcloud_auth

    - run:
        name: Running Robo tests
        command: gcloud firebase test android run firebase_test_lab.yml:robo-tests-virtual --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk
        no_output_timeout: 30m

  runInstrumentationTest:
    <<: *gcloud_config
    steps:
    - checkout

    - attach_workspace:
        at: jdroid-android-sample/build/outputs/apk

    - *gcloud_auth

    - run:
        name: Running Instrumentation tests
        command: |
          gcloud firebase test android run firebase_test_lab.yml:instrumentation-tests-physical --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk --test ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
          gcloud firebase test android run firebase_test_lab.yml:instrumentation-tests-virtual --async --app ./jdroid-android-sample/build/outputs/apk/automation/jdroid-automation.apk --test ./jdroid-android-sample/build/outputs/apk/androidTest/automation/jdroid-android-sample-automation-androidTest.apk
        no_output_timeout: 30m

  upgradeDependencies:
    <<: *android_config
    steps:
    - checkout
    - run:
        name: Upgrade Dependencies
        command: ./gradlew upgradeDependencies -PpullRequestEnabled=true --stacktrace

workflows:
  version: 2
  commit:
    jobs:
      - ktlint
      - build
      - lint:
          requires:
            - build
      - buildSample:
          requires:
            - build
      - unitTest:
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - master
          requires:
            - unitTest
            - lint
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildAutomationTest
      - runRoboTest:
          requires:
            - buildAutomationTest
      - runInstrumentationTest:
          requires:
            - buildAutomationTest
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - upgradeDependencies
